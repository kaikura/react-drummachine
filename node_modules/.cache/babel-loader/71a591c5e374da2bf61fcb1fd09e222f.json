{"ast":null,"code":"export class Cymbal {\n  constructor(ctx) {\n    this.ctx = void 0;\n    this.ratios = void 0;\n    this.tone = void 0;\n    this.decay = void 0;\n    this.noise = void 0;\n    this.noiseEnvelope = void 0;\n    this.noiseFilter = void 0;\n    this.oscEnvelope = void 0;\n    this.bndPass = void 0;\n    this.hipass = void 0;\n    this.volume = void 0;\n    this.fxAmount = void 0;\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = vol => {\n      this.volume = vol;\n    };\n\n    this.setFXAmount = amount => {\n      this.fxAmount = parseFloat(amount);\n    };\n\n    this.ctx = ctx;\n    this.ratios = [1, 1.3420, 1.2312, 1.6532, 1.9523, 2.1523];\n    this.tone = 130.81;\n    this.decay = 1.5;\n    this.volume = 1;\n    this.fxAmount = 0;\n  }\n\n  async setup() {\n    this.noise = this.ctx.createBufferSource();\n    this.noise.buffer = this.noiseBuffer();\n    this.noiseEnvelope = this.ctx.createGain();\n    this.noiseFilter = this.ctx.createBiquadFilter();\n    this.noiseFilter.type = 'highpass';\n    this.noiseFilter.frequency.value = 2000;\n    this.oscEnvelope = this.ctx.createGain();\n    this.bndPass = this.ctx.createBiquadFilter();\n    this.bndPass.type = 'bandpass';\n    this.bndPass.frequency.value = 20000;\n    this.bndPass.Q.value = 0.2;\n    this.hipass = this.ctx.createBiquadFilter();\n    this.hipass.type = \"highpass\";\n    this.hipass.frequency.value = 5000;\n    this.noise.connect(this.noiseFilter);\n    this.noiseFilter.connect(this.noiseEnvelope);\n    this.bndPass.connect(this.hipass);\n    this.hipass.connect(this.oscEnvelope);\n    this.noiseEnvelope.connect(this.ctx.destination);\n    this.oscEnvelope.connect(this.ctx.destination);\n  }\n\n  noiseBuffer() {\n    var bufferSize = this.ctx.sampleRate;\n    var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n    var output = buffer.getChannelData(0);\n\n    for (var i = 0; i < bufferSize; i++) {\n      output[i] = Math.random() * 2 - 1;\n    }\n\n    return buffer;\n  }\n\n  trigger(time) {\n    if (this.volume === 0) {\n      return;\n    }\n\n    ;\n    this.setup();\n    this.ratios.forEach(ratio => {\n      var osc = this.ctx.createOscillator();\n      osc.type = \"square\"; // Frequency is the fundamental * this oscillator's ratio\n\n      osc.frequency.value = this.tone * ratio;\n      osc.connect(this.bndPass);\n      osc.start(time);\n      osc.stop(time + this.decay);\n    });\n    this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.01);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay + this.fxAmount / 100);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay + this.fxAmount / 50);\n  }\n\n}","map":{"version":3,"sources":["/Users/agnesepantaleone/Desktop/Drummachine/src/engines/cymbal.ts"],"names":["Cymbal","constructor","ctx","ratios","tone","decay","noise","noiseEnvelope","noiseFilter","oscEnvelope","bndPass","hipass","volume","fxAmount","setTone","setVolume","vol","setFXAmount","amount","parseFloat","setup","createBufferSource","buffer","noiseBuffer","createGain","createBiquadFilter","type","frequency","value","Q","connect","destination","bufferSize","sampleRate","createBuffer","output","getChannelData","i","Math","random","trigger","time","forEach","ratio","osc","createOscillator","start","stop","gain","setValueAtTime","exponentialRampToValueAtTime"],"mappings":"AAEA,OAAO,MAAMA,MAAN,CAAyC;AAc5CC,EAAAA,WAAW,CAACC,GAAD,EAAM;AAAA,SAbTA,GAaS;AAAA,SAZTC,MAYS;AAAA,SAXVC,IAWU;AAAA,SAVVC,KAUU;AAAA,SATTC,KASS;AAAA,SARTC,aAQS;AAAA,SAPTC,WAOS;AAAA,SANTC,WAMS;AAAA,SALTC,OAKS;AAAA,SAJTC,MAIS;AAAA,SAHVC,MAGU;AAAA,SAFVC,QAEU;;AAAA,SAgEjBC,OAhEiB,GAgENV,IAAD,IAAkB;AACxB,WAAKA,IAAL,GAAYA,IAAZ;AACH,KAlEgB;;AAAA,SAmEjBW,SAnEiB,GAmEJC,GAAD,IAAiB;AACzB,WAAKJ,MAAL,GAAcI,GAAd;AACH,KArEgB;;AAAA,SAsEjBC,WAtEiB,GAsEFC,MAAD,IAAiB;AAC3B,WAAKL,QAAL,GAAgBM,UAAU,CAACD,MAAD,CAA1B;AACH,KAxEgB;;AACb,SAAKhB,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAc,CAAC,CAAD,EAAI,MAAJ,EAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,EAAoC,MAApC,CAAd;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA,SAAKC,KAAL,GAAa,GAAb;AACA,SAAKO,MAAL,GAAc,CAAd;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACH;;AAED,QAAMO,KAAN,GAAc;AACV,SAAKd,KAAL,GAAa,KAAKJ,GAAL,CAASmB,kBAAT,EAAb;AACA,SAAKf,KAAL,CAAWgB,MAAX,GAAoB,KAAKC,WAAL,EAApB;AACA,SAAKhB,aAAL,GAAqB,KAAKL,GAAL,CAASsB,UAAT,EAArB;AACA,SAAKhB,WAAL,GAAmB,KAAKN,GAAL,CAASuB,kBAAT,EAAnB;AACA,SAAKjB,WAAL,CAAiBkB,IAAjB,GAAwB,UAAxB;AACA,SAAKlB,WAAL,CAAiBmB,SAAjB,CAA2BC,KAA3B,GAAmC,IAAnC;AACA,SAAKnB,WAAL,GAAmB,KAAKP,GAAL,CAASsB,UAAT,EAAnB;AACA,SAAKd,OAAL,GAAe,KAAKR,GAAL,CAASuB,kBAAT,EAAf;AACA,SAAKf,OAAL,CAAagB,IAAb,GAAoB,UAApB;AACA,SAAKhB,OAAL,CAAaiB,SAAb,CAAuBC,KAAvB,GAA+B,KAA/B;AACA,SAAKlB,OAAL,CAAamB,CAAb,CAAeD,KAAf,GAAuB,GAAvB;AACA,SAAKjB,MAAL,GAAc,KAAKT,GAAL,CAASuB,kBAAT,EAAd;AACA,SAAKd,MAAL,CAAYe,IAAZ,GAAmB,UAAnB;AACA,SAAKf,MAAL,CAAYgB,SAAZ,CAAsBC,KAAtB,GAA8B,IAA9B;AACA,SAAKtB,KAAL,CAAWwB,OAAX,CAAmB,KAAKtB,WAAxB;AACA,SAAKA,WAAL,CAAiBsB,OAAjB,CAAyB,KAAKvB,aAA9B;AAEA,SAAKG,OAAL,CAAaoB,OAAb,CAAqB,KAAKnB,MAA1B;AACA,SAAKA,MAAL,CAAYmB,OAAZ,CAAoB,KAAKrB,WAAzB;AACA,SAAKF,aAAL,CAAmBuB,OAAnB,CAA2B,KAAK5B,GAAL,CAAS6B,WAApC;AACA,SAAKtB,WAAL,CAAiBqB,OAAjB,CAAyB,KAAK5B,GAAL,CAAS6B,WAAlC;AACH;;AAEDR,EAAAA,WAAW,GAAG;AACV,QAAIS,UAAU,GAAG,KAAK9B,GAAL,CAAS+B,UAA1B;AACA,QAAIX,MAAM,GAAG,KAAKpB,GAAL,CAASgC,YAAT,CAAsB,CAAtB,EAAyBF,UAAzB,EAAqC,KAAK9B,GAAL,CAAS+B,UAA9C,CAAb;AACA,QAAIE,MAAM,GAAGb,MAAM,CAACc,cAAP,CAAsB,CAAtB,CAAb;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAApB,EAAgCK,CAAC,EAAjC,EAAqC;AACjCF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAAhC;AACH;;AAED,WAAOjB,MAAP;AACH;;AAEDkB,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,QAAI,KAAK7B,MAAL,KAAgB,CAApB,EAAuB;AAAE;AAAQ;;AAAA;AACjC,SAAKQ,KAAL;AACA,SAAKjB,MAAL,CAAYuC,OAAZ,CAAqBC,KAAD,IAAW;AAC3B,UAAIC,GAAG,GAAG,KAAK1C,GAAL,CAAS2C,gBAAT,EAAV;AACAD,MAAAA,GAAG,CAAClB,IAAJ,GAAW,QAAX,CAF2B,CAG3B;;AACAkB,MAAAA,GAAG,CAACjB,SAAJ,CAAcC,KAAd,GAAsB,KAAKxB,IAAL,GAAYuC,KAAlC;AACAC,MAAAA,GAAG,CAACd,OAAJ,CAAY,KAAKpB,OAAjB;AACAkC,MAAAA,GAAG,CAACE,KAAJ,CAAUL,IAAV;AACAG,MAAAA,GAAG,CAACG,IAAJ,CAASN,IAAI,GAAG,KAAKpC,KAArB;AACH,KARD;AAUA,SAAKI,WAAL,CAAiBuC,IAAjB,CAAsBC,cAAtB,CAAqC,UAAU,KAAKrC,MAApD,EAA4D6B,IAA5D;AACA,SAAKhC,WAAL,CAAiBuC,IAAjB,CAAsBE,4BAAtB,CAAmD,IAAI,KAAKtC,MAA5D,EAAoE6B,IAAI,GAAG,IAA3E;AACA,SAAKhC,WAAL,CAAiBuC,IAAjB,CAAsBE,4BAAtB,CAAmD,MAAM,KAAKtC,MAA9D,EAAsE6B,IAAI,GAAG,MAAM,KAAKpC,KAAlB,GAA0B,KAAKQ,QAAL,GAAc,GAA9G;AACA,SAAKJ,WAAL,CAAiBuC,IAAjB,CAAsBE,4BAAtB,CAAmD,UAAU,KAAKtC,MAAlE,EAA0E6B,IAAI,GAAG,KAAKpC,KAAZ,GAAoB,KAAKQ,QAAL,GAAc,EAA5G;AACH;;AA5E2C","sourcesContent":["import { InstrumentEngine } from \"./engines\";\n\nexport class Cymbal implements InstrumentEngine {\n    private ctx: AudioContext;\n    private ratios: number[];\n    public tone: number;\n    public decay: number;\n    private noise!: AudioBufferSourceNode;\n    private noiseEnvelope!: GainNode;\n    private noiseFilter!: BiquadFilterNode;\n    private oscEnvelope!: GainNode;\n    private bndPass!: BiquadFilterNode;\n    private hipass!: BiquadFilterNode;\n    public volume: number;\n    public fxAmount: number;\n\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.ratios = [1, 1.3420, 1.2312, 1.6532, 1.9523, 2.1523];\n        this.tone = 130.81;\n        this.decay = 1.5;\n        this.volume = 1;\n        this.fxAmount = 0;\n    }\n\n    async setup() {\n        this.noise = this.ctx.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n        this.noiseEnvelope = this.ctx.createGain();\n        this.noiseFilter = this.ctx.createBiquadFilter();\n        this.noiseFilter.type = 'highpass';\n        this.noiseFilter.frequency.value = 2000;\n        this.oscEnvelope = this.ctx.createGain();\n        this.bndPass = this.ctx.createBiquadFilter();\n        this.bndPass.type = 'bandpass';\n        this.bndPass.frequency.value = 20000;\n        this.bndPass.Q.value = 0.2;\n        this.hipass = this.ctx.createBiquadFilter();\n        this.hipass.type = \"highpass\";\n        this.hipass.frequency.value = 5000;\n        this.noise.connect(this.noiseFilter);\n        this.noiseFilter.connect(this.noiseEnvelope);\n\n        this.bndPass.connect(this.hipass);\n        this.hipass.connect(this.oscEnvelope);\n        this.noiseEnvelope.connect(this.ctx.destination);\n        this.oscEnvelope.connect(this.ctx.destination);\n    }\n\n    noiseBuffer() {\n        var bufferSize = this.ctx.sampleRate;\n        var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return buffer;\n    }\n\n    trigger(time) {\n        if (this.volume === 0) { return };\n        this.setup();\n        this.ratios.forEach((ratio) => {\n            var osc = this.ctx.createOscillator();\n            osc.type = \"square\";\n            // Frequency is the fundamental * this oscillator's ratio\n            osc.frequency.value = this.tone * ratio;\n            osc.connect(this.bndPass);\n            osc.start(time);\n            osc.stop(time + this.decay);\n        });\n\n        this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.01);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay + this.fxAmount/100);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay + this.fxAmount/50);\n    }\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    }\n    setVolume = (vol: number) => {\n        this.volume = vol;\n    }\n    setFXAmount = (amount: any) => {\n        this.fxAmount = parseFloat(amount);\n    }\n}"]},"metadata":{},"sourceType":"module"}