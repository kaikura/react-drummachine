{"ast":null,"code":"export class HiHat {\n  constructor(ctx) {\n    this.ctx = void 0;\n    this.ratios = void 0;\n    this.tone = void 0;\n    this.decay = void 0;\n    this.oscEnvelope = void 0;\n    this.bndPass = void 0;\n    this.hipass = void 0;\n    this.volume = void 0;\n    this.fxAmount = void 0;\n    this.panner = void 0;\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = vol => {\n      this.volume = vol;\n    };\n\n    this.setFXAmount = amount => {\n      this.fxAmount = amount;\n    };\n\n    this.ctx = ctx;\n    this.ratios = [1, 1.3420, 1.2312, 1.6532, 1.9523, 2.1523];\n    this.tone = 130.81;\n    this.decay = 0.5;\n    this.volume = 1;\n    this.fxAmount = 0;\n  }\n\n  setup() {\n    this.oscEnvelope = this.ctx.createGain();\n    this.bndPass = this.ctx.createBiquadFilter();\n    this.bndPass.type = 'bandpass';\n    this.bndPass.frequency.value = 20000;\n    this.bndPass.Q.value = 0.2;\n    this.hipass = this.ctx.createBiquadFilter();\n    this.hipass.type = \"highpass\";\n    this.hipass.frequency.value = 5000;\n    this.panner = this.ctx.createStereoPanner();\n    this.bndPass.connect(this.hipass);\n    this.hipass.connect(this.oscEnvelope);\n    this.oscEnvelope.connect(this.panner);\n    this.panner.connect(this.ctx.destination);\n  }\n\n  trigger(time) {\n    if (this.volume === 0) {\n      return;\n    }\n\n    ;\n    this.setup();\n    this.panner.pan.value = Math.cos(time * 4) * this.fxAmount / 100;\n    this.ratios.forEach(ratio => {\n      var osc = this.ctx.createOscillator();\n      osc.type = \"square\";\n      osc.frequency.value = this.tone * ratio;\n      osc.connect(this.bndPass);\n      osc.start(time);\n      osc.stop(time + this.decay);\n    });\n    this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.067 * this.decay);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay);\n  }\n\n}","map":{"version":3,"sources":["/Users/agnesepantaleone/Desktop/Drummachine/src/engines/hat.ts"],"names":["HiHat","constructor","ctx","ratios","tone","decay","oscEnvelope","bndPass","hipass","volume","fxAmount","panner","setTone","setVolume","vol","setFXAmount","amount","setup","createGain","createBiquadFilter","type","frequency","value","Q","createStereoPanner","connect","destination","trigger","time","pan","Math","cos","forEach","ratio","osc","createOscillator","start","stop","gain","setValueAtTime","exponentialRampToValueAtTime"],"mappings":"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","sourcesContent":["import { InstrumentEngine } from \"./engines\";\n\n\nexport class HiHat implements InstrumentEngine {\n    private ctx: AudioContext;\n    private ratios: number[];\n    public tone: number;\n    public decay: number;\n    private oscEnvelope!: GainNode;\n    private bndPass!: BiquadFilterNode;\n    private hipass!: BiquadFilterNode;\n    public volume: number;\n    public fxAmount: number;\n    private panner!: StereoPannerNode;\n\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.ratios = [1, 1.3420, 1.2312, 1.6532, 1.9523, 2.1523];\n        this.tone = 130.81;\n        this.decay = 0.5;\n        this.volume = 1;\n        this.fxAmount = 0;\n    }\n\n    setup() {\n        this.oscEnvelope = this.ctx.createGain();\n        this.bndPass = this.ctx.createBiquadFilter();\n        this.bndPass.type = 'bandpass';\n        this.bndPass.frequency.value = 20000;\n        this.bndPass.Q.value = 0.2;\n        this.hipass = this.ctx.createBiquadFilter();\n        this.hipass.type = \"highpass\";\n        this.hipass.frequency.value = 5000;\n        this.panner = this.ctx.createStereoPanner();\n\n        this.bndPass.connect(this.hipass);\n        this.hipass.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.panner);\n        this.panner.connect(this.ctx.destination);\n    }\n\n    trigger(time) {\n        if (this.volume === 0) { return };\n        this.setup();\n        this.panner.pan.value = Math.cos(time * 4) * this.fxAmount/100;\n        this.ratios.forEach((ratio) => {\n            var osc = this.ctx.createOscillator();\n            osc.type = \"square\";\n            osc.frequency.value = this.tone * ratio;\n            osc.connect(this.bndPass);\n            osc.start(time);\n            osc.stop(time + this.decay);\n        });\n        this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.067 * this.decay);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay);\n    }\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    }\n    setVolume = (vol: number) => {\n        this.volume = vol;\n    }\n\n    setFXAmount = (amount: number) => {\n        this.fxAmount = amount;\n    }\n}"]},"metadata":{},"sourceType":"module"}